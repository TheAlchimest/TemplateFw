// <auto-generated />
using System;
using TemplateFw.Persistence.Persistent.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace TemplateFw.Persistence.Migrations
{
    [DbContext(typeof(TemplateFwDbContext))]
    partial class TemplateFwDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Arabic_100_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TemplateFw.Domain.Models.Announces.Announce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActivationCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastActivationBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("LastActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastDectivationBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("LastDectivationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartAtivationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PortalId");

                    b.ToTable("Announces", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Announces.AnnounceDetail", b =>
                {
                    b.Property<int>("AnnounceId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("AnnounceId", "LanguageId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_AnnounceDetail_LanguageId");

                    b.ToTable("AnnounceDetails", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Announces.AnnounceUser", b =>
                {
                    b.Property<int>("AnnounceId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AnnounceId", "UserId");

                    b.ToTable("AnnounceUsers", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Announces.VwAnnounceDetail", b =>
                {
                    b.Property<int>("ActivationCount")
                        .HasColumnType("int");

                    b.Property<int>("AnnounceId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartAtivationDate")
                        .HasColumnType("datetime2");

                    b.ToView("VwAnnounceDetail");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Announces.VwAnnounceFullData", b =>
                {
                    b.Property<int>("ActivationCount")
                        .HasColumnType("int");

                    b.Property<int>("AnnounceId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultLanguage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<string>("PortalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartAtivationDate")
                        .HasColumnType("datetime2");

                    b.ToView("VwAnnounceFullData");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Complaints.Complaint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("CommunicationType")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<string>("ResponseContent")
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PortalId");

                    b.ToTable("Complaints", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Complaints.VwComplaintsFullData", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("CommunicationType")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<string>("PortalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToView("VwComplaintsFullData");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Countries.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnName")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PortalId" }, "IX_FAQ_PortalId");

                    b.ToTable("FAQ", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.FaqDetail", b =>
                {
                    b.Property<int>("FaqId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("FaqId", "LanguageId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_FaqDetail_LanguageId");

                    b.ToTable("FaqDetail", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Identity.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("CanManageAdmins")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageAnnounces")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageComplaints")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageExternalBusinessAccounts")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageFaqs")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageGovernmentAccounts")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageIndividualsAccounts")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageInternalBusinessAccounts")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageMobile")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManagePolls")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageSecurityAccounts")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageServiceProvidersAccounts")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageServices")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageVotings")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRole");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Identity.ApplicationUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApplicationRoleId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ApplicationUserRoles");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Identity.UserFavoriteService", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceId", "UserId");

                    b.ToTable("UserFavoriteServices", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Language", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Medias.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Extension")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FileName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("MediaType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasDefaultValueSql("(N'')");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_Media_MediaId");

                    b.ToTable("Medias", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Mobile.BlockedVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OperatingSystem")
                        .HasColumnType("int");

                    b.Property<string>("VersionNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("BlockedVersion", "Mobile");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Mobile.MobileMaintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Maintenance", "Mobile");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.Poll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActivationCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LastActivationBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("LastActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastDectivationBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("LastDectivationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartAtivationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PortalId");

                    b.ToTable("Polls", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.PollDetail", b =>
                {
                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasDefaultValueSql("(N'')");

                    b.HasKey("PollId", "LanguageId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_PollDetail_LanguageId");

                    b.ToTable("PollDetails", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.PollQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.ToTable("PollQuestions", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.PollQuestionAnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("PollQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PollQuestionId");

                    b.ToTable("PollQuestionAnswerOptions", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.PollQuestionAnswerOptionDetail", b =>
                {
                    b.Property<int>("PollQuestionAnswerOptionId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)")
                        .HasDefaultValueSql("(N'')");

                    b.HasKey("PollQuestionAnswerOptionId", "LanguageId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_PollQuestionAnswerOptionDetail_LanguageId");

                    b.ToTable("PollQuestionAnswerOptionDetails", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.PollQuestionDetail", b =>
                {
                    b.Property<int>("PollQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasDefaultValueSql("(N'')");

                    b.HasKey("PollQuestionId", "LanguageId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_PollQuestionDetail_LanguageId");

                    b.ToTable("PollQuestionDetails", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.PollResponse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.ToTable("PollResponses", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.PollResponseDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PollQuestionAnswerOptionId")
                        .HasColumnType("int");

                    b.Property<int>("PollQuestionId")
                        .HasColumnType("int");

                    b.Property<long>("PollResponseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PollQuestionAnswerOptionId");

                    b.HasIndex("PollQuestionId");

                    b.HasIndex("PollResponseId");

                    b.ToTable("PollResponseDetails", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.VwPollDetail", b =>
                {
                    b.Property<int>("ActivationCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LastActivationBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastDectivationBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastDectivationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartAtivationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.ToView("VwPollDetail");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.VwPollFullData", b =>
                {
                    b.Property<int>("ActivationCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultLanguage")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastActivationBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastDectivationBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastDectivationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<string>("PortalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("int");

                    b.Property<int>("ResponseCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartAtivationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasDefaultValueSql("(N'')");

                    b.ToView("VwPollFullData");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.VwPollQuestionDetail", b =>
                {
                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<int>("PollQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasDefaultValueSql("(N'')");

                    b.ToView("VwPollQuestionDetail");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.VwPollQuestionFullData", b =>
                {
                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultLanguage")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<int>("PollQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasDefaultValueSql("(N'')");

                    b.ToView("VwPollQuestionFullData");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.VwPollQuestionOptionsFullData", b =>
                {
                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultLanguage")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PollQuestionAnswerOptionId")
                        .HasColumnType("int");

                    b.Property<int>("PollQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasDefaultValueSql("(N'')");

                    b.ToView("VwPollQuestionOptionsFullData");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.VwPollResponseAnswerFullData", b =>
                {
                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<long>("PollResponseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("VwPollResponseAnswerFullData");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.VwPollResponseFullData", b =>
                {
                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<long>("PollResponseId")
                        .HasColumnType("bigint");

                    b.Property<string>("PollTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PotalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("VwPollResponseFullData");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Portal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Portal", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.PortalDetail", b =>
                {
                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PortalId", "LanguageId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_PortalDetail_LanguageId");

                    b.ToTable("PortalDetail", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.ServiceBases.ServiceBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ServiceBases", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.ServiceBases.ServiceBaseDetail", b =>
                {
                    b.Property<int>("ServiceBaseId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasDefaultValueSql("(N'')");

                    b.HasKey("ServiceBaseId", "LanguageId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_ServiceBaseDetail_LanguageId");

                    b.ToTable("ServiceBaseDetails", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.ServiceBases.VwServiceBaseDetail", b =>
                {
                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("ServiceBaseId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasDefaultValueSql("(N'')");

                    b.ToView("VwServiceBaseDetail");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.ServiceBases.VwServiceBaseFullData", b =>
                {
                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultLanguage")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("ServiceBaseId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValueSql("(N'')");

                    b.ToView("VwServiceBaseFullData");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.ServiceCategories.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.ServiceCategories.ServiceCategoryDetail", b =>
                {
                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasDefaultValueSql("(N'')");

                    b.HasKey("ServiceCategoryId", "LanguageId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_ServiceCategoryDetail_LanguageId");

                    b.ToTable("ServiceCategoryDetails", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.ServiceCategories.VwServiceCategoryDetail", b =>
                {
                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasDefaultValueSql("(N'')");

                    b.ToView("VwServiceCategoryDetail");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.ServiceCategories.VwServiceCategoryFullData", b =>
                {
                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultLanguage")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ServicesCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValueSql("(N'')");

                    b.ToView("VwServiceCategoryFullData");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Services.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("APIUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CommunicationType")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("EvaluationRate")
                        .HasColumnType("real");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHasSubServices")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParentService")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("LogInRequired")
                        .HasColumnType("bit");

                    b.Property<string>("MobileUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<int>("NumberOfEvaluator")
                        .HasColumnType("int");

                    b.Property<string>("PDFMediaId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentServiceId")
                        .HasColumnType("int");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PublishedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("RequestPassword")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RequestUsername")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ServiceBaseId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceCode")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<int>("ServiceSectorId")
                        .HasColumnType("int");

                    b.Property<bool>("ShowAssetsDataInAssets")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInAssets")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInCatalog")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInFollowUp")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowRequestsDataInFollowUp")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StoppedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("StoppedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("Video")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PortalId");

                    b.HasIndex("ServiceCode")
                        .IsUnique();

                    b.HasIndex("ServiceSectorId");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Service_CategoryId");

                    b.HasIndex(new[] { "ParentServiceId" }, "IX_Service_ParentServiceId");

                    b.HasIndex(new[] { "ServiceBaseId" }, "IX_Service_ServiceBaseId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Services.ServiceDetail", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Conditions")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DocumentRequired")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Fees")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Steps")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("TimeRequired")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasDefaultValueSql("(N'')");

                    b.HasKey("ServiceId", "LanguageId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_ServiceDetail_LanguageId");

                    b.ToTable("ServiceDetail", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Services.ServicePaymentChannel", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "Channel");

                    b.HasIndex(new[] { "Channel" }, "IX_ServicePaymentChannel_Channel");

                    b.HasIndex(new[] { "ServiceId" }, "IX_ServicePaymentChannel_ServiceId");

                    b.ToTable("ServicePaymentChannels", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Services.ServiceRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ServiceId" }, "IX_ServiceRate_ServiceId");

                    b.ToTable("ServiceRates", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Services.ServiceSubmitChannel", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "Channel");

                    b.HasIndex(new[] { "Channel" }, "IX_ServiceSubmitChannel_Channel");

                    b.HasIndex(new[] { "ServiceId" }, "IX_ServiceSubmitChannel_ServiceId");

                    b.ToTable("ServiceSubmitChannels", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Services.UserAccountService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserAccountService_UserId");

                    b.ToTable("UserAccountService", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Services.VwServiceDetail", b =>
                {
                    b.Property<string>("APIUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CommunicationType")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("EvaluationRate")
                        .HasColumnType("real");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHasSubServices")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParentService")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("LogInRequired")
                        .HasColumnType("bit");

                    b.Property<string>("MobileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<int>("NumberOfEvaluator")
                        .HasColumnType("int");

                    b.Property<string>("PDFMediaId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentServiceId")
                        .HasColumnType("int");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PublishedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceBaseId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceSectorId")
                        .HasColumnType("int");

                    b.Property<bool>("ShowAssetsDataInAssets")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInAssets")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInCatalog")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInFollowUp")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowRequestsDataInFollowUp")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StoppedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("StoppedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.ToView("VwServiceDetail");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Services.VwServiceFullData", b =>
                {
                    b.Property<string>("APIUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CommunicationType")
                        .HasColumnType("int");

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DocumentRequired")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("EvaluationRate")
                        .HasColumnType("real");

                    b.Property<string>("Fees")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCategoryActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultLanguage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHasSubServices")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParentService")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("LogInRequired")
                        .HasColumnType("bit");

                    b.Property<string>("MobileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfEvaluator")
                        .HasColumnType("int");

                    b.Property<string>("PDFMediaId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentServiceId")
                        .HasColumnType("int");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PublishedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceBaseId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceSectorId")
                        .HasColumnType("int");

                    b.Property<bool>("ShowAssetsDataInAssets")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInAssets")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInCatalog")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInFollowUp")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowRequestsDataInFollowUp")
                        .HasColumnType("bit");

                    b.Property<string>("Steps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StoppedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("StoppedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeRequired")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("int");

                    b.ToView("VwServiceFullData");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.ServiceSectors.ServiceSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ServiceSectors", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.ServiceSectors.ServiceSectorDetail", b =>
                {
                    b.Property<int>("ServiceSectorId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("MainTitle")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ServiceSectorId", "LanguageId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_ServiceSectorDetail_LanguageId");

                    b.ToTable("ServiceSectorDetails", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.ServiceSectors.VwServiceSectorDetail", b =>
                {
                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("MainTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceSectorId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.ToView("VwServiceSectorDetail");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.ServiceSectors.VwServiceSectorFullData", b =>
                {
                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultLanguage")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("MainTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceSectorId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.ToView("VwServiceSectorFullData");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.UserDocuments.UserDocument", b =>
                {
                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DocumentEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DocumentIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentTypeAr")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("DocumentTypeEn")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("FoundationNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("URL")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("UserIDNumber")
                        .HasColumnType("bigint");

                    b.HasKey("DocumentNumber", "ServiceId");

                    b.HasIndex("PortalId");

                    b.ToTable("UserDocuments");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.UserDocuments.VwUserDocumentCountData", b =>
                {
                    b.Property<int>("Counts")
                        .HasColumnType("int");

                    b.Property<string>("FoundationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<bool>("ShowAssetsDataInAssets")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInAssets")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserIDNumber")
                        .HasColumnType("bigint");

                    b.ToView("VwUserDocumentCountData");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.UserDocuments.VwUserDocumentFullData", b =>
                {
                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DocumentEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DocumentIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentTypeAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentTypeEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoundationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserIDNumber")
                        .HasColumnType("bigint");

                    b.ToView("VwUserDocumentFullData");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.UserRequests.UserRequest", b =>
                {
                    b.Property<string>("RequestNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoundationNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<string>("RequestTypeAr")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("RequestTypeEn")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("UserIDNumber")
                        .HasColumnType("bigint");

                    b.HasKey("RequestNumber", "ServiceId");

                    b.HasIndex("PortalId");

                    b.ToTable("UserRequests");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.UserRequests.VmUserRequestFullData", b =>
                {
                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoundationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<string>("RequestNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestTypeAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestTypeEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserIDNumber")
                        .HasColumnType("bigint");

                    b.HasIndex("PortalId");

                    b.ToView("VmUserRequestFullData");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Voting.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActivationCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LastActivationBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("LastActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastDectivationBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("LastDectivationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartAtivationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PortalId");

                    b.ToTable("Votes", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Voting.VoteDetail", b =>
                {
                    b.Property<int>("VoteId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Option1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Option2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Option3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Option4")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Option5")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("VoteId", "LanguageId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_VoteDetail_LanguageId");

                    b.ToTable("VoteDetails", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Voting.VoteResponse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Answer")
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VoteId");

                    b.ToTable("VoteResponses", (string)null);
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Voting.VwVoteDetail", b =>
                {
                    b.Property<int>("ActivationCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Option1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Option2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Option3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Option4")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Option5")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("StartAtivationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VoteId")
                        .HasColumnType("int");

                    b.ToView("VwVoteDetail");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Voting.VwVoteFullData", b =>
                {
                    b.Property<int>("ActivationCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultLanguage")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Option1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Option2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Option3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Option4")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Option5")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<string>("PortalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ResponseCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartAtivationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VoteId")
                        .HasColumnType("int");

                    b.ToView("VwVoteFullData");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Voting.VwVoteResponseCountFullData", b =>
                {
                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnswersCount")
                        .HasColumnType("int");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<int>("VoteId")
                        .HasColumnType("int");

                    b.ToView("VwVoteResponseCountFullData");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Voting.VwVoteResponseFullData", b =>
                {
                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VoteId")
                        .HasColumnType("int");

                    b.Property<long>("VoteResponseId")
                        .HasColumnType("bigint");

                    b.ToView("VwVoteResponseFullData");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.VwFaqDetail", b =>
                {
                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FaqId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.ToView("VwFaqDetail");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.VwFaqFullData", b =>
                {
                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FaqId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultLanguage")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<string>("PortalName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("VwFaqFullData");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.VwPortalDetail", b =>
                {
                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.ToView("VwPortalDetail");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Announces.Announce", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Portal", "Portal")
                        .WithMany("Announces")
                        .HasForeignKey("PortalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portal");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Announces.AnnounceDetail", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Announces.Announce", "Announce")
                        .WithMany("AnnounceDetails")
                        .HasForeignKey("AnnounceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TemplateFw.Domain.Models.Language", "Language")
                        .WithMany("AnnounceDetails")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announce");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Announces.AnnounceUser", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Announces.Announce", "Announce")
                        .WithMany("AnnounceUsers")
                        .HasForeignKey("AnnounceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announce");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Complaints.Complaint", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Portal", "Portal")
                        .WithMany("Complaints")
                        .HasForeignKey("PortalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portal");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Faq", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Portal", "Portal")
                        .WithMany("Faqs")
                        .HasForeignKey("PortalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portal");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.FaqDetail", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Faq", "Faq")
                        .WithMany("FaqDetails")
                        .HasForeignKey("FaqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TemplateFw.Domain.Models.Language", "Language")
                        .WithMany("FaqDetails")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faq");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Identity.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("ApplicationRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TemplateFw.Domain.Models.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.Poll", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Portal", "Portal")
                        .WithMany("Polls")
                        .HasForeignKey("PortalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portal");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.PollDetail", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Language", "Language")
                        .WithMany("PollDetails")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TemplateFw.Domain.Models.Polls.Poll", "Poll")
                        .WithMany("PollDetails")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.PollQuestion", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Polls.Poll", "Poll")
                        .WithMany("PollQuestions")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.PollQuestionAnswerOption", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Polls.PollQuestion", "PollQuestion")
                        .WithMany("PollQuestionAnswerOptions")
                        .HasForeignKey("PollQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PollQuestion");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.PollQuestionAnswerOptionDetail", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Language", "Language")
                        .WithMany("PollQuestionAnswerOptionDetails")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TemplateFw.Domain.Models.Polls.PollQuestionAnswerOption", "PollQuestionAnswerOption")
                        .WithMany("PollQuestionAnswerOptionDetails")
                        .HasForeignKey("PollQuestionAnswerOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PollQuestionAnswerOption");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.PollQuestionDetail", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Language", "Language")
                        .WithMany("PollQuestionDetails")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TemplateFw.Domain.Models.Polls.PollQuestion", "PollQuestion")
                        .WithMany("PollQuestionDetails")
                        .HasForeignKey("PollQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PollQuestion");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.PollResponse", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Polls.Poll", "Poll")
                        .WithMany("PollResponses")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.PollResponseDetail", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Polls.PollQuestionAnswerOption", "Answer")
                        .WithMany("PollResponseDetails")
                        .HasForeignKey("PollQuestionAnswerOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TemplateFw.Domain.Models.Polls.PollQuestion", "PollQuestion")
                        .WithMany("PollResponseDetails")
                        .HasForeignKey("PollQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TemplateFw.Domain.Models.Polls.PollResponse", "PollResponse")
                        .WithMany("PollResponseDetails")
                        .HasForeignKey("PollResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("PollQuestion");

                    b.Navigation("PollResponse");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.PortalDetail", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Language", "Language")
                        .WithMany("PortalDetails")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.ServiceBases.ServiceBaseDetail", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Language", "Language")
                        .WithMany("ServiceBaseDetails")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TemplateFw.Domain.Models.ServiceBases.ServiceBase", "ServiceBase")
                        .WithMany("ServiceBaseDetails")
                        .HasForeignKey("ServiceBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ServiceBase");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.ServiceCategories.ServiceCategoryDetail", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Language", "Language")
                        .WithMany("ServiceCategoryDetails")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TemplateFw.Domain.Models.ServiceCategories.ServiceCategory", "ServiceCategory")
                        .WithMany("ServiceCategoryDetails")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Services.Service", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.ServiceCategories.ServiceCategory", "ServiceCategory")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TemplateFw.Domain.Models.Services.Service", "ParentService")
                        .WithMany("InverseParentService")
                        .HasForeignKey("ParentServiceId");

                    b.HasOne("TemplateFw.Domain.Models.Portal", "Portal")
                        .WithMany("Services")
                        .HasForeignKey("PortalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TemplateFw.Domain.Models.ServiceBases.ServiceBase", "ServiceBase")
                        .WithMany("Services")
                        .HasForeignKey("ServiceBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TemplateFw.Domain.Models.ServiceSectors.ServiceSector", "ServiceSector")
                        .WithMany("Services")
                        .HasForeignKey("ServiceSectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentService");

                    b.Navigation("Portal");

                    b.Navigation("ServiceBase");

                    b.Navigation("ServiceCategory");

                    b.Navigation("ServiceSector");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Services.ServiceDetail", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Language", "Language")
                        .WithMany("ServiceDetails")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TemplateFw.Domain.Models.Services.Service", "Service")
                        .WithMany("ServiceDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Services.ServicePaymentChannel", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Services.Service", "Service")
                        .WithMany("ServicePaymentChannels")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Services.ServiceRate", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Services.Service", "Service")
                        .WithMany("ServiceRates")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Services.ServiceSubmitChannel", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Services.Service", "Service")
                        .WithMany("ServiceSubmitChannels")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Services.UserAccountService", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Services.Service", "Service")
                        .WithMany("UserAccountServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.ServiceSectors.ServiceSectorDetail", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Language", "Language")
                        .WithMany("ServiceSectorDetails")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TemplateFw.Domain.Models.ServiceSectors.ServiceSector", "ServiceSector")
                        .WithMany("ServiceSectorDetails")
                        .HasForeignKey("ServiceSectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ServiceSector");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.UserDocuments.UserDocument", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Portal", "Portal")
                        .WithMany()
                        .HasForeignKey("PortalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portal");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.UserRequests.UserRequest", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Portal", "Portal")
                        .WithMany()
                        .HasForeignKey("PortalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portal");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.UserRequests.VmUserRequestFullData", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Portal", "Portal")
                        .WithMany()
                        .HasForeignKey("PortalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portal");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Voting.Vote", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Portal", "Portal")
                        .WithMany("Votes")
                        .HasForeignKey("PortalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portal");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Voting.VoteDetail", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Language", "Language")
                        .WithMany("VoteDetails")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TemplateFw.Domain.Models.Voting.Vote", "Vote")
                        .WithMany("VoteDetails")
                        .HasForeignKey("VoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Vote");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Voting.VoteResponse", b =>
                {
                    b.HasOne("TemplateFw.Domain.Models.Voting.Vote", "Vote")
                        .WithMany("VoteResponses")
                        .HasForeignKey("VoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vote");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Announces.Announce", b =>
                {
                    b.Navigation("AnnounceDetails");

                    b.Navigation("AnnounceUsers");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Faq", b =>
                {
                    b.Navigation("FaqDetails");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Identity.ApplicationRole", b =>
                {
                    b.Navigation("ApplicationUserRoles");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Identity.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserRoles");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Language", b =>
                {
                    b.Navigation("AnnounceDetails");

                    b.Navigation("FaqDetails");

                    b.Navigation("PollDetails");

                    b.Navigation("PollQuestionAnswerOptionDetails");

                    b.Navigation("PollQuestionDetails");

                    b.Navigation("PortalDetails");

                    b.Navigation("ServiceBaseDetails");

                    b.Navigation("ServiceCategoryDetails");

                    b.Navigation("ServiceDetails");

                    b.Navigation("ServiceSectorDetails");

                    b.Navigation("VoteDetails");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.Poll", b =>
                {
                    b.Navigation("PollDetails");

                    b.Navigation("PollQuestions");

                    b.Navigation("PollResponses");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.PollQuestion", b =>
                {
                    b.Navigation("PollQuestionAnswerOptions");

                    b.Navigation("PollQuestionDetails");

                    b.Navigation("PollResponseDetails");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.PollQuestionAnswerOption", b =>
                {
                    b.Navigation("PollQuestionAnswerOptionDetails");

                    b.Navigation("PollResponseDetails");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Polls.PollResponse", b =>
                {
                    b.Navigation("PollResponseDetails");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Portal", b =>
                {
                    b.Navigation("Announces");

                    b.Navigation("Complaints");

                    b.Navigation("Faqs");

                    b.Navigation("Polls");

                    b.Navigation("Services");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.ServiceBases.ServiceBase", b =>
                {
                    b.Navigation("ServiceBaseDetails");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.ServiceCategories.ServiceCategory", b =>
                {
                    b.Navigation("ServiceCategoryDetails");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Services.Service", b =>
                {
                    b.Navigation("InverseParentService");

                    b.Navigation("ServiceDetails");

                    b.Navigation("ServicePaymentChannels");

                    b.Navigation("ServiceRates");

                    b.Navigation("ServiceSubmitChannels");

                    b.Navigation("UserAccountServices");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.ServiceSectors.ServiceSector", b =>
                {
                    b.Navigation("ServiceSectorDetails");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("TemplateFw.Domain.Models.Voting.Vote", b =>
                {
                    b.Navigation("VoteDetails");

                    b.Navigation("VoteResponses");
                });
#pragma warning restore 612, 618
        }
    }
}
